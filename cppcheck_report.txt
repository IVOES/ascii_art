ascii_art.c:0:0: information: Too many #ifdef configurations - cppcheck only checks 12 of 20 configurations. Use --force to check all configurations. [toomanyconfigs]

^
ascii_art.c:324:21: style: Redundant pointer operation on 'pRender' - it's already a pointer. [redundantPointerOp]
 transform_to_ascii(&(*pRender), zPixel, pnHeight, pnWidth, zBuf);
                    ^
ascii_art.c:161:5: style: Variable 'i0' is assigned a value that is never used. [unreadVariable]
 i0 = 0;
    ^
ascii_art.c:162:5: style: Variable 'j0' is assigned a value that is never used. [unreadVariable]
 j0 = 0;
    ^
stb_image.h:2099:27: warning: Either the condition 'n>=(int)(sizeof(stbi__bmask)/sizeof(*stbi__bmask))' is redundant or the array 'stbi__jbias[16]' is accessed at index 16, which is out of bounds. [arrayIndexOutOfBoundsCond]
   return k + (stbi__jbias[n] & ~sgn);
                          ^
stb_image.h:2095:19: note: Assuming that condition 'n>=(int)(sizeof(stbi__bmask)/sizeof(*stbi__bmask))' is not redundant
   if (n < 0 || n >= (int) (sizeof(stbi__bmask)/sizeof(*stbi__bmask))) return 0;
                  ^
stb_image.h:2099:27: note: Array index out of bounds
   return k + (stbi__jbias[n] & ~sgn);
                          ^
stb_image.h:5407:17: style: Redundant condition: If 'req_comp >= 3', the comparison 'req_comp' is always true. [redundantCondition]
   if (req_comp && req_comp >= 3) // we can directly decode 3 or 4
                ^
stb_image.h:6913:6: style: Redundant initialization for 'c'. The initialized value is overwritten before it is read. [redundantInitialization]
   c = (char) stbi__get8(z);
     ^
stb_image.h:6911:11: note: c is initialized
   char c = '\0';
          ^
stb_image.h:6913:6: note: c is overwritten
   c = (char) stbi__get8(z);
     ^
stb_image.h:1127:11: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   return stbi__errpuc("unknown image type", "Image not of any known type, or corrupt");
          ^
stb_image.h:1137:32: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (reduced == NULL) return stbi__errpuc("outofmem", "Out of memory");
                               ^
stb_image.h:1153:50: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (enlarged == NULL) return (stbi__uint16 *) stbi__errpuc("outofmem", "Out of memory");
                                                 ^
stb_image.h:1310:19: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!f) return stbi__errpuc("can't fopen", "Unable to open file");
                  ^
stb_image.h:1346:31: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!f) return (stbi_us *) stbi__errpuc("can't fopen", "Unable to open file");
                              ^
stb_image.h:1415:11: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   return stbi__errpf("unknown image type", "Image not of any known type, or corrupt");
          ^
stb_image.h:1437:19: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!f) return stbi__errpf("can't fopen", "Unable to open file");
                  ^
stb_image.h:1705:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("outofmem", "Out of memory");
             ^
stb_image.h:1729:76: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         default: STBI_ASSERT(0); STBI_FREE(data); STBI_FREE(good); return stbi__errpuc("unsupported", "Unsupported format conversion");
                                                                           ^
stb_image.h:1762:31: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return (stbi__uint16 *) stbi__errpuc("outofmem", "Out of memory");
                              ^
stb_image.h:1786:92: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         default: STBI_ASSERT(0); STBI_FREE(data); STBI_FREE(good); return (stbi__uint16*) stbi__errpuc("unsupported", "Unsupported format conversion");
                                                                                           ^
stb_image.h:1803:50: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (output == NULL) { STBI_FREE(data); return stbi__errpf("outofmem", "Out of memory"); }
                                                 ^
stb_image.h:1829:50: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (output == NULL) { STBI_FREE(data); return stbi__errpuc("outofmem", "Out of memory"); }
                                                 ^
stb_image.h:3770:45: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (req_comp < 0 || req_comp > 4) return stbi__errpuc("bad req_comp", "Internal error");
                                            ^
stb_image.h:3800:71: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         if (!z->img_comp[k].linebuf) { stbi__cleanup_jpeg(z); return stbi__errpuc("outofmem", "Out of memory"); }
                                                                      ^
stb_image.h:3818:52: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      if (!output) { stbi__cleanup_jpeg(z); return stbi__errpuc("outofmem", "Out of memory"); }
                                                   ^
stb_image.h:5119:45: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (req_comp < 0 || req_comp > 4) return stbi__errpuc("bad req_comp", "Internal error");
                                            ^
stb_image.h:5126:17: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         return stbi__errpuc("bad bits_per_channel", "PNG not supported: unsupported color depth");
                ^
stb_image.h:5278:61: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (stbi__get8(s) != 'B' || stbi__get8(s) != 'M') return stbi__errpuc("not BMP", "Corrupt BMP");
                                                            ^
stb_image.h:5287:33: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (info->offset < 0) return stbi__errpuc("bad BMP", "bad BMP");
                                ^
stb_image.h:5289:80: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (hsz != 12 && hsz != 40 && hsz != 56 && hsz != 108 && hsz != 124) return stbi__errpuc("unknown BMP", "BMP type not supported: unknown");
                                                                               ^
stb_image.h:5297:38: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (stbi__get16le(s) != 1) return stbi__errpuc("bad BMP", "bad BMP");
                                     ^
stb_image.h:5301:50: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      if (compress == 1 || compress == 2) return stbi__errpuc("BMP RLE", "BMP type not supported: RLE");
                                                 ^
stb_image.h:5335:26: style: Same value in both branches of ternary operator. [duplicateValueTernary]
                  return stbi__errpuc("bad BMP", "bad BMP");
                         ^
stb_image.h:5338:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
               return stbi__errpuc("bad BMP", "bad BMP");
                      ^
stb_image.h:5343:20: style: Same value in both branches of ternary operator. [duplicateValueTernary]
            return stbi__errpuc("bad BMP", "bad BMP");
                   ^
stb_image.h:5380:47: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                              ^
stb_image.h:5381:47: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                              ^
stb_image.h:5399:16: style: Same value in both branches of ternary operator. [duplicateValueTernary]
        return stbi__errpuc("bad offset", "Corrupt BMP");
               ^
stb_image.h:5414:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("too large", "Corrupt BMP");
             ^
stb_image.h:5417:21: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!out) return stbi__errpuc("outofmem", "Out of memory");
                    ^
stb_image.h:5420:63: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      if (psize == 0 || psize > 256) { STBI_FREE(out); return stbi__errpuc("invalid", "Corrupt BMP"); }
                                                              ^
stb_image.h:5432:37: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      else { STBI_FREE(out); return stbi__errpuc("bad bpp", "Corrupt BMP"); }
                                    ^
stb_image.h:5489:58: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         if (!mr || !mg || !mb) { STBI_FREE(out); return stbi__errpuc("bad masks", "Corrupt BMP"); }
                                                         ^
stb_image.h:5495:93: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         if (rcount > 8 || gcount > 8 || bcount > 8 || acount > 8) { STBI_FREE(out); return stbi__errpuc("bad masks", "Corrupt BMP"); }
                                                                                            ^
stb_image.h:5720:49: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (tga_height > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                                ^
stb_image.h:5721:48: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (tga_width > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                               ^
stb_image.h:5736:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("bad format", "Can't find out TGA pixelformat");
             ^
stb_image.h:5744:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("too large", "Corrupt TGA");
             ^
stb_image.h:5747:26: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!tga_data) return stbi__errpuc("outofmem", "Out of memory");
                         ^
stb_image.h:5764:20: style: Same value in both branches of ternary operator. [duplicateValueTernary]
            return stbi__errpuc("bad palette", "Corrupt TGA");
                   ^
stb_image.h:5773:20: style: Same value in both branches of ternary operator. [duplicateValueTernary]
            return stbi__errpuc("outofmem", "Out of memory");
                   ^
stb_image.h:5785:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
               return stbi__errpuc("bad palette", "Corrupt TGA");
                      ^
stb_image.h:5957:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("not PSD", "Corrupt PSD image");
             ^
stb_image.h:5961:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("wrong version", "Unsupported version of PSD image");
             ^
stb_image.h:5969:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("wrong channel count", "Unsupported number of channels in PSD image");
             ^
stb_image.h:5975:40: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (h > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                       ^
stb_image.h:5976:40: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (w > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                       ^
stb_image.h:5981:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("unsupported bit depth", "PSD bit depth is not 8 or 16 bit");
             ^
stb_image.h:5994:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("wrong color format", "PSD is not in RGB color format");
             ^
stb_image.h:6011:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("bad compression", "PSD has an unknown compression format");
             ^
stb_image.h:6015:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("too large", "Corrupt PSD");
             ^
stb_image.h:6025:21: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!out) return stbi__errpuc("outofmem", "Out of memory");
                    ^
stb_image.h:6058:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
               return stbi__errpuc("corrupt", "bad RLE data");
                      ^
stb_image.h:6192:38: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         if (stbi__at_eof(s)) return stbi__errpuc("bad file","PIC file too short");
                                     ^
stb_image.h:6220:17: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         return stbi__errpuc("bad format","too many packets");
                ^
stb_image.h:6231:44: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      if (stbi__at_eof(s))          return stbi__errpuc("bad file","file too short (reading packets)");
                                           ^
stb_image.h:6232:38: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      if (packet->size != 8)  return stbi__errpuc("bad format","packet isn't 8bpp");
                                     ^
stb_image.h:6246:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
               return stbi__errpuc("bad format","packet has bad compression type");
                      ^
stb_image.h:6265:52: style: Same value in both branches of ternary operator. [duplicateValueTernary]
                     if (stbi__at_eof(s))   return stbi__errpuc("bad file","file too short (pure read count)");
                                                   ^
stb_image.h:6283:48: style: Same value in both branches of ternary operator. [duplicateValueTernary]
                  if (stbi__at_eof(s))  return stbi__errpuc("bad file","file too short (mixed read count)");
                                               ^
stb_image.h:6293:32: style: Same value in both branches of ternary operator. [duplicateValueTernary]
                        return stbi__errpuc("bad file","scanline overrun");
                               ^
stb_image.h:6302:45: style: Same value in both branches of ternary operator. [duplicateValueTernary]
                     if (count>left) return stbi__errpuc("bad file","scanline overrun");
                                            ^
stb_image.h:6333:40: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (y > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                       ^
stb_image.h:6334:40: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (x > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                       ^
stb_image.h:6336:33: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (stbi__at_eof(s))  return stbi__errpuc("bad file","file too short (pic header)");
                                ^
stb_image.h:6337:51: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!stbi__mad3sizes_valid(x, y, 4, 0)) return stbi__errpuc("too large", "PIC image too large to decode");
                                                  ^
stb_image.h:6563:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
               return stbi__errpuc("no clear code", "Corrupt GIF");
                      ^
stb_image.h:6569:26: style: Same value in both branches of ternary operator. [duplicateValueTernary]
                  return stbi__errpuc("too many codes", "Corrupt GIF");
                         ^
stb_image.h:6576:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
               return stbi__errpuc("illegal code in raster", "Corrupt GIF");
                      ^
stb_image.h:6587:20: style: Same value in both branches of ternary operator. [duplicateValueTernary]
            return stbi__errpuc("illegal code in raster", "Corrupt GIF");
                   ^
stb_image.h:6608:17: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         return stbi__errpuc("too large", "GIF image is too large");
                ^
stb_image.h:6614:17: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         return stbi__errpuc("outofmem", "Out of memory");
                ^
stb_image.h:6672:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
               return stbi__errpuc("bad Image Descriptor", "Corrupt GIF");
                      ^
stb_image.h:6705:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
               return stbi__errpuc("missing color table", "Corrupt GIF");
                      ^
stb_image.h:6764:20: style: Same value in both branches of ternary operator. [duplicateValueTernary]
            return stbi__errpuc("unknown code", "Corrupt GIF");
                   ^
stb_image.h:6801:26: style: Same value in both branches of ternary operator. [duplicateValueTernary]
                  return stbi__errpuc("outofmem", "Out of memory");
                         ^
stb_image.h:6843:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("not GIF", "Image was not as a gif type.");
             ^
stb_image.h:6974:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpf("not HDR", "Corrupt HDR image");
             ^
stb_image.h:6983:26: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!valid)    return stbi__errpf("unsupported format", "Unsupported HDR format");
                         ^
stb_image.h:6988:42: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (strncmp(token, "-Y ", 3))  return stbi__errpf("unsupported data layout", "Unsupported HDR format");
                                         ^
stb_image.h:6992:42: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (strncmp(token, "+X ", 3))  return stbi__errpf("unsupported data layout", "Unsupported HDR format");
                                         ^
stb_image.h:6996:45: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (height > STBI_MAX_DIMENSIONS) return stbi__errpf("too large","Very large image (corrupt?)");
                                            ^
stb_image.h:6997:44: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (width > STBI_MAX_DIMENSIONS) return stbi__errpf("too large","Very large image (corrupt?)");
                                           ^
stb_image.h:7006:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpf("too large", "HDR image is too large");
             ^
stb_image.h:7011:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpf("outofmem", "Out of memory");
             ^
stb_image.h:7049:79: style: Same value in both branches of ternary operator. [duplicateValueTernary]
         if (len != width) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf("invalid decoded scanline length", "corrupt HDR"); }
                                                                              ^
stb_image.h:7054:23: style: Same value in both branches of ternary operator. [duplicateValueTernary]
               return stbi__errpf("outofmem", "Out of memory");
                      ^
stb_image.h:7067:89: style: Same value in both branches of ternary operator. [duplicateValueTernary]
                  if (count > nleft) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf("corrupt", "bad RLE data in HDR"); }
                                                                                        ^
stb_image.h:7072:89: style: Same value in both branches of ternary operator. [duplicateValueTernary]
                  if (count > nleft) { STBI_FREE(hdr_data); STBI_FREE(scanline); return stbi__errpf("corrupt", "bad RLE data in HDR"); }
                                                                                        ^
stb_image.h:7313:47: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (s->img_y > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                              ^
stb_image.h:7314:47: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (s->img_x > STBI_MAX_DIMENSIONS) return stbi__errpuc("too large","Very large image (corrupt?)");
                                              ^
stb_image.h:7321:14: style: Same value in both branches of ternary operator. [duplicateValueTernary]
      return stbi__errpuc("too large", "PNM too large");
             ^
stb_image.h:7324:21: style: Same value in both branches of ternary operator. [duplicateValueTernary]
   if (!out) return stbi__errpuc("outofmem", "Out of memory");
                    ^
stb_image.h:2196:8: style: The scope of the variable 'diff' can be reduced. [variableScope]
   int diff,dc;
       ^
stb_image.h:2196:13: style: The scope of the variable 'dc' can be reduced. [variableScope]
   int diff,dc;
            ^
stb_image.h:2197:8: style: The scope of the variable 't' can be reduced. [variableScope]
   int t;
       ^
stb_image.h:3192:15: style: The scope of the variable 'q' can be reduced. [variableScope]
   int Lf,p,i,q, h_max=1,v_max=1,c;
              ^
stb_image.h:3407:10: style: The scope of the variable 't0' can be reduced. [variableScope]
   int i,t0,t1;
         ^
stb_image.h:4132:10: style: The scope of the variable 's' can be reduced. [variableScope]
   int b,s;
         ^
stb_image.h:4351:15: style: The scope of the variable 'type' can be reduced. [variableScope]
   int final, type;
              ^
stb_image.h:4767:11: style: The scope of the variable 'i' can be reduced. [variableScope]
      int i,j,x,y;
          ^
stb_image.h:4767:13: style: The scope of the variable 'j' can be reduced. [variableScope]
      int i,j,x,y;
            ^
stb_image.h:5577:9: style: The scope of the variable 'sz' can be reduced. [variableScope]
    int sz, tga_colormap_type;
        ^
stb_image.h:5711:11: style: The scope of the variable 'j' can be reduced. [variableScope]
   int i, j;
          ^
stb_image.h:5713:8: style: The scope of the variable 'RLE_count' can be reduced. [variableScope]
   int RLE_count = 0;
       ^
stb_image.h:5714:8: style: The scope of the variable 'RLE_repeating' can be reduced. [variableScope]
   int RLE_repeating = 0;
       ^
stb_image.h:5715:8: style: The scope of the variable 'read_next_pixel' can be reduced. [variableScope]
   int read_next_pixel = 1;
       ^
stb_image.h:5909:22: style: The scope of the variable 'len' can be reduced. [variableScope]
   int count, nleft, len;
                     ^
stb_image.h:6597:8: style: The scope of the variable 'dispose' can be reduced. [variableScope]
   int dispose;
       ^
stb_image.h:6778:11: style: The scope of the variable 'out_size' can be reduced. [variableScope]
      int out_size = 0;
          ^
stb_image.h:6779:11: style: The scope of the variable 'delays_size' can be reduced. [variableScope]
      int delays_size = 0;
          ^
stb_image.h:5263:6: error: Shifting by a negative value is undefined behaviour [shiftNegative]
   v >>= (8-bits);
     ^
stb_image.h:1306:71: style:inconclusive: Function 'stbi_load' argument 4 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                      ^
stb_image.h:396:83: note: Function 'stbi_load' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_uc *stbi_load            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                  ^
stb_image.h:1306:71: note: Function 'stbi_load' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                      ^
stb_image.h:1306:81: style:inconclusive: Function 'stbi_load' argument 5 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                                ^
stb_image.h:396:105: note: Function 'stbi_load' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_uc *stbi_load            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                                        ^
stb_image.h:1306:81: note: Function 'stbi_load' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                                ^
stb_image.h:1316:68: style:inconclusive: Function 'stbi_load_from_file' argument 4 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                   ^
stb_image.h:397:70: note: Function 'stbi_load_from_file' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_uc *stbi_load_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                     ^
stb_image.h:1316:68: note: Function 'stbi_load_from_file' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                   ^
stb_image.h:1316:78: style:inconclusive: Function 'stbi_load_from_file' argument 5 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                             ^
stb_image.h:397:92: note: Function 'stbi_load_from_file' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_uc *stbi_load_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                           ^
stb_image.h:1316:78: note: Function 'stbi_load_from_file' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                             ^
stb_image.h:1329:76: style:inconclusive: Function 'stbi_load_from_file_16' argument 4 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                           ^
stb_image.h:419:71: note: Function 'stbi_load_from_file_16' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_us *stbi_load_from_file_16(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                      ^
stb_image.h:1329:76: note: Function 'stbi_load_from_file_16' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                           ^
stb_image.h:1329:86: style:inconclusive: Function 'stbi_load_from_file_16' argument 5 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                                     ^
stb_image.h:419:93: note: Function 'stbi_load_from_file_16' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_us *stbi_load_from_file_16(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                            ^
stb_image.h:1329:86: note: Function 'stbi_load_from_file_16' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi__uint16 *stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                                     ^
stb_image.h:1342:74: style:inconclusive: Function 'stbi_load_16' argument 4 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                         ^
stb_image.h:418:84: note: Function 'stbi_load_16' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_us *stbi_load_16          (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                   ^
stb_image.h:1342:74: note: Function 'stbi_load_16' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                         ^
stb_image.h:1342:84: style:inconclusive: Function 'stbi_load_16' argument 5 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                                   ^
stb_image.h:418:106: note: Function 'stbi_load_16' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_us *stbi_load_16          (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                                         ^
stb_image.h:1342:84: note: Function 'stbi_load_16' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_us *stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                                   ^
stb_image.h:1369:93: style:inconclusive: Function 'stbi_load_from_memory' argument 5 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
                                                                                            ^
stb_image.h:392:109: note: Function 'stbi_load_from_memory' argument 5 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_uc *stbi_load_from_memory   (stbi_uc           const *buffer, int len   , int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                                            ^
stb_image.h:1369:93: note: Function 'stbi_load_from_memory' argument 5 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
                                                                                            ^
stb_image.h:1369:103: style:inconclusive: Function 'stbi_load_from_memory' argument 6 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
                                                                                                      ^
stb_image.h:392:131: note: Function 'stbi_load_from_memory' argument 6 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_uc *stbi_load_from_memory   (stbi_uc           const *buffer, int len   , int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                                                                  ^
stb_image.h:1369:103: note: Function 'stbi_load_from_memory' argument 6 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
                                                                                                      ^
stb_image.h:1376:107: style:inconclusive: Function 'stbi_load_from_callbacks' argument 5 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
                                                                                                          ^
stb_image.h:393:109: note: Function 'stbi_load_from_callbacks' argument 5 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk  , void *user, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                                            ^
stb_image.h:1376:107: note: Function 'stbi_load_from_callbacks' argument 5 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
                                                                                                          ^
stb_image.h:1376:117: style:inconclusive: Function 'stbi_load_from_callbacks' argument 6 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
                                                                                                                    ^
stb_image.h:393:131: note: Function 'stbi_load_from_callbacks' argument 6 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk  , void *user, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                                                                  ^
stb_image.h:1376:117: note: Function 'stbi_load_from_callbacks' argument 6 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
                                                                                                                    ^
stb_image.h:1418:92: style:inconclusive: Function 'stbi_loadf_from_memory' argument 5 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
                                                                                           ^
stb_image.h:427:100: note: Function 'stbi_loadf_from_memory' argument 5 names different: declaration 'channels_in_file' definition 'comp'.
   STBIDEF float *stbi_loadf_from_memory     (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                                   ^
stb_image.h:1418:92: note: Function 'stbi_loadf_from_memory' argument 5 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
                                                                                           ^
stb_image.h:1418:102: style:inconclusive: Function 'stbi_loadf_from_memory' argument 6 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
                                                                                                     ^
stb_image.h:427:122: note: Function 'stbi_loadf_from_memory' argument 6 names different: declaration 'desired_channels' definition 'req_comp'.
   STBIDEF float *stbi_loadf_from_memory     (stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                                                         ^
stb_image.h:1418:102: note: Function 'stbi_loadf_from_memory' argument 6 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)
                                                                                                     ^
stb_image.h:1425:106: style:inconclusive: Function 'stbi_loadf_from_callbacks' argument 5 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
                                                                                                         ^
stb_image.h:428:112: note: Function 'stbi_loadf_from_callbacks' argument 5 names different: declaration 'channels_in_file' definition 'comp'.
   STBIDEF float *stbi_loadf_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y,  int *channels_in_file, int desired_channels);
                                                                                                               ^
stb_image.h:1425:106: note: Function 'stbi_loadf_from_callbacks' argument 5 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
                                                                                                         ^
stb_image.h:1425:116: style:inconclusive: Function 'stbi_loadf_from_callbacks' argument 6 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
                                                                                                                   ^
stb_image.h:428:134: note: Function 'stbi_loadf_from_callbacks' argument 6 names different: declaration 'desired_channels' definition 'req_comp'.
   STBIDEF float *stbi_loadf_from_callbacks  (stbi_io_callbacks const *clbk, void *user, int *x, int *y,  int *channels_in_file, int desired_channels);
                                                                                                                                     ^
stb_image.h:1425:116: note: Function 'stbi_loadf_from_callbacks' argument 6 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)
                                                                                                                   ^
stb_image.h:1433:70: style:inconclusive: Function 'stbi_loadf' argument 4 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                     ^
stb_image.h:431:85: note: Function 'stbi_loadf' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
   STBIDEF float *stbi_loadf            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                    ^
stb_image.h:1433:70: note: Function 'stbi_loadf' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                     ^
stb_image.h:1433:80: style:inconclusive: Function 'stbi_loadf' argument 5 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                               ^
stb_image.h:431:107: note: Function 'stbi_loadf' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
   STBIDEF float *stbi_loadf            (char const *filename, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                                          ^
stb_image.h:1433:80: note: Function 'stbi_loadf' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)
                                                                               ^
stb_image.h:1443:67: style:inconclusive: Function 'stbi_loadf_from_file' argument 4 names different: declaration 'channels_in_file' definition 'comp'. [funcArgNamesDifferent]
STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                  ^
stb_image.h:432:72: note: Function 'stbi_loadf_from_file' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
   STBIDEF float *stbi_loadf_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                       ^
stb_image.h:1443:67: note: Function 'stbi_loadf_from_file' argument 4 names different: declaration 'channels_in_file' definition 'comp'.
STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                  ^
stb_image.h:1443:77: style:inconclusive: Function 'stbi_loadf_from_file' argument 5 names different: declaration 'desired_channels' definition 'req_comp'. [funcArgNamesDifferent]
STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                            ^
stb_image.h:432:94: note: Function 'stbi_loadf_from_file' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
   STBIDEF float *stbi_loadf_from_file  (FILE *f, int *x, int *y, int *channels_in_file, int desired_channels);
                                                                                             ^
stb_image.h:1443:77: note: Function 'stbi_loadf_from_file' argument 5 names different: declaration 'desired_channels' definition 'req_comp'.
STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)
                                                                            ^
stb_image.h:6319:51: style:inconclusive: Function 'stbi__pic_load' argument 2 names different: declaration 'x' definition 'px'. [funcArgNamesDifferent]
static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)
                                                  ^
stb_image.h:912:55: note: Function 'stbi__pic_load' argument 2 names different: declaration 'x' definition 'px'.
static void    *stbi__pic_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
                                                      ^
stb_image.h:6319:51: note: Function 'stbi__pic_load' argument 2 names different: declaration 'x' definition 'px'.
static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)
                                                  ^
stb_image.h:6319:59: style:inconclusive: Function 'stbi__pic_load' argument 3 names different: declaration 'y' definition 'py'. [funcArgNamesDifferent]
static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)
                                                          ^
stb_image.h:912:63: note: Function 'stbi__pic_load' argument 3 names different: declaration 'y' definition 'py'.
static void    *stbi__pic_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri);
                                                              ^
stb_image.h:6319:59: note: Function 'stbi__pic_load' argument 3 names different: declaration 'y' definition 'py'.
static void *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)
                                                          ^
stb_image.h:7515:63: style:inconclusive: Function 'stbi_info_from_callbacks' argument 1 names different: declaration 'clbk' definition 'c'. [funcArgNamesDifferent]
STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
                                                              ^
stb_image.h:464:68: note: Function 'stbi_info_from_callbacks' argument 1 names different: declaration 'clbk' definition 'c'.
STBIDEF int      stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp);
                                                                   ^
stb_image.h:7515:63: note: Function 'stbi_info_from_callbacks' argument 1 names different: declaration 'clbk' definition 'c'.
STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)
                                                              ^
stb_image.h:7529:68: style:inconclusive: Function 'stbi_is_16_bit_from_callbacks' argument 1 names different: declaration 'clbk' definition 'c'. [funcArgNamesDifferent]
STBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)
                                                                   ^
stb_image.h:466:73: note: Function 'stbi_is_16_bit_from_callbacks' argument 1 names different: declaration 'clbk' definition 'c'.
STBIDEF int      stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *clbk, void *user);
                                                                        ^
stb_image.h:7529:68: note: Function 'stbi_is_16_bit_from_callbacks' argument 1 names different: declaration 'clbk' definition 'c'.
STBIDEF int stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)
                                                                   ^
stb_image.h:2093:38: portability: Shifting signed 32-bit value by 31 bits is implementation-defined behaviour [shiftTooManyBitsSigned]
   sgn = (stbi__int32)j->code_buffer >> 31; // sign bit is always in MSB
                                     ^
stb_image.h:6778:20: style: Variable 'out_size' is assigned a value that is never used. [unreadVariable]
      int out_size = 0;
                   ^
stb_image.h:6779:23: style: Variable 'delays_size' is assigned a value that is never used. [unreadVariable]
      int delays_size = 0;
                      ^
stb_image.h:6805:29: style: Variable 'out_size' is assigned a value that is never used. [unreadVariable]
                   out_size = layers * stride;
                            ^
stb_image.h:6810:31: style: Variable 'delays_size' is assigned a value that is never used. [unreadVariable]
                  delays_size = layers * sizeof(int);
                              ^
stb_image.h:6814:25: style: Variable 'out_size' is assigned a value that is never used. [unreadVariable]
               out_size = layers * stride;
                        ^
stb_image.h:6817:31: style: Variable 'delays_size' is assigned a value that is never used. [unreadVariable]
                  delays_size = layers * sizeof(int);
                              ^
ascii_art.h:48:0: information: Skipping configuration '_MSC_VER;__GNUC__;__MINGW32__;__declspec' since the value of '__declspec' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
ART_APIEXPORT void AsciiArtInit(ascii_render *pRender);
^
ascii_art.h:52:0: information: Skipping configuration '_MSC_VER;__GNUC__;__MINGW32__;__declspec' since the value of '__declspec' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
ART_APIEXPORT unsigned int AsciiArtTextBufSize(ascii_render *pRender, int img_width, int img_height);
^
ascii_art.h:56:0: information: Skipping configuration '_MSC_VER;__GNUC__;__MINGW32__;__declspec' since the value of '__declspec' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly. [ConfigurationNotChecked]
ART_APIEXPORT void AsciiArtRender(ascii_render *pRender, unsigned char *zPixel /*IN/OUT*/, int *pnWidth /*IN/OUT*/, int *pnHeight /*IN/OUT*/, unsigned char *zBuf/* Optional/OUT */, int Optimize);
^
nofile:0:0: information: Cppcheck cannot find all the include files (use --check-config for details) [missingInclude]

